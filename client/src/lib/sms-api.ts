/**
 * SMS Integration for Bangladesh Market
 * Payment reminders and transaction sharing via SMS
 * Competitive feature - all major apps have SMS functionality
 */

import { formatCurrency, toBengaliNumber, getBengaliDate } from './bengali-utils';
import { formatBangladeshPhone } from './whatsapp-business';

interface SMSMessage {
  to: string;
  message: string;
  type: 'due_reminder' | 'payment_confirmation' | 'transaction_receipt' | 'stock_alert';
}

interface SMSConfig {
  provider: 'bulk_sms_bd' | 'ssl_wireless' | 'banglalink' | 'custom';
  apiKey?: string;
  apiUrl?: string;
  senderId?: string;
}

class SMSManager {
  private config: SMSConfig = {
    provider: 'bulk_sms_bd',
    senderId: 'DokanHisab'
  };

  // Configure SMS provider
  setConfig(config: Partial<SMSConfig>): void {
    this.config = { ...this.config, ...config };
    console.log('üì± SMS: Provider configured:', this.config.provider);
  }

  // Generate due reminder SMS in Bengali
  generateDueReminderSMS(customerName: string, dueAmount: number, shopName: string): string {
    return `‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ${customerName},
‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶ü‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£: ${formatCurrency(dueAmount)}
‡¶¶‡ßã‡¶ï‡¶æ‡¶®: ${shopName}
‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ø‡¶•‡¶æ‡¶∂‡ßÄ‡¶ò‡ßç‡¶∞ ‡¶™‡¶∞‡¶ø‡¶∂‡ßã‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶‡•§

- ‡¶¶‡ßã‡¶ï‡¶æ‡¶® ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™`;
  }

  // Generate payment confirmation SMS
  generatePaymentConfirmationSMS(customerName: string, amount: number, method: string, shopName: string): string {
    const date = getBengaliDate();
    
    return `${customerName}, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶´‡¶≤ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!
‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£: ${formatCurrency(amount)}
‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø: ${method}
‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: ${date}
‡¶¶‡ßã‡¶ï‡¶æ‡¶®: ${shopName}

- ‡¶¶‡ßã‡¶ï‡¶æ‡¶® ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™`;
  }

  // Generate transaction receipt SMS
  generateTransactionReceiptSMS(details: {
    customerName: string;
    items: { name: string; quantity: number; price: number }[];
    total: number;
    paid: number;
    due: number;
    shopName: string;
  }): string {
    const date = getBengaliDate();
    let itemsList = '';
    
    details.items.slice(0, 3).forEach(item => {
      itemsList += `‚Ä¢ ${item.name} x${toBengaliNumber(item.quantity)} = ${formatCurrency(item.price)}\n`;
    });
    
    if (details.items.length > 3) {
      itemsList += `‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶∞‡ßã ${toBengaliNumber(details.items.length - 3)}‡¶ü‡¶ø ‡¶™‡¶£‡ßç‡¶Ø...\n`;
    }

    return `‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡¶Ø‡¶º ‡¶∞‡¶∂‡¶ø‡¶¶ - ${details.shopName}
‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: ${date}
‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï: ${details.customerName}

${itemsList}
‡¶Æ‡ßã‡¶ü: ${formatCurrency(details.total)}
‡¶™‡ßá‡¶á‡¶°: ${formatCurrency(details.paid)}
${details.due > 0 ? `‡¶¨‡¶æ‡¶ï‡¶ø: ${formatCurrency(details.due)}` : '‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶™‡¶∞‡¶ø‡¶∂‡ßã‡¶ß‡¶ø‡¶§'}

‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶!`;
  }

  // Generate stock alert SMS
  generateStockAlertSMS(lowStockItems: { name: string; currentStock: number }[], shopOwner: string): string {
    let itemsList = '';
    lowStockItems.slice(0, 5).forEach(item => {
      itemsList += `‚Ä¢ ${item.name}: ${toBengaliNumber(item.currentStock)}‡¶ü‡¶ø\n`;
    });

    return `‡¶∏‡ßç‡¶ü‡¶ï ‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ!
${shopOwner}, ‡¶®‡¶ø‡¶Æ‡ßç‡¶®‡¶≤‡¶ø‡¶ñ‡¶ø‡¶§ ‡¶™‡¶£‡ßç‡¶Ø‡ßá‡¶∞ ‡¶∏‡ßç‡¶ü‡¶ï ‡¶ï‡¶Æ:

${itemsList}
‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶∏‡ßç‡¶ü‡¶ï ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§

- ‡¶¶‡ßã‡¶ï‡¶æ‡¶® ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™`;
  }

  // Send SMS using configured provider
  async sendSMS(smsData: SMSMessage): Promise<boolean> {
    const formattedPhone = formatBangladeshPhone(smsData.to);
    
    try {
      // For demo purposes, we'll simulate SMS sending
      // In production, integrate with actual SMS providers
      console.log('üì± SMS: Sending SMS to', formattedPhone);
      console.log('üì± SMS: Message type:', smsData.type);
      console.log('üì± SMS: Content:', smsData.message);
      
      // Simulate API call delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // For now, just open the default SMS app (mobile devices)
      if (typeof navigator !== 'undefined' && navigator.userAgent.match(/Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i)) {
        const smsUrl = `sms:${formattedPhone}?body=${encodeURIComponent(smsData.message)}`;
        window.open(smsUrl, '_self');
      } else {
        // For desktop, show the message content
        alert(`SMS would be sent to ${formattedPhone}:\n\n${smsData.message}`);
      }
      
      console.log('üì± SMS: Message sent successfully');
      return true;
      
    } catch (error) {
      console.error('üì± SMS: Failed to send message:', error);
      return false;
    }
  }

  // Send due reminder
  async sendDueReminder(customerName: string, phone: string, dueAmount: number, shopName: string): Promise<boolean> {
    const message = this.generateDueReminderSMS(customerName, dueAmount, shopName);
    
    return await this.sendSMS({
      to: phone,
      message,
      type: 'due_reminder'
    });
  }

  // Send payment confirmation
  async sendPaymentConfirmation(customerName: string, phone: string, amount: number, method: string, shopName: string): Promise<boolean> {
    const message = this.generatePaymentConfirmationSMS(customerName, amount, method, shopName);
    
    return await this.sendSMS({
      to: phone,
      message,
      type: 'payment_confirmation'
    });
  }

  // Send transaction receipt
  async sendTransactionReceipt(phone: string, transactionDetails: any): Promise<boolean> {
    const message = this.generateTransactionReceiptSMS(transactionDetails);
    
    return await this.sendSMS({
      to: phone,
      message,
      type: 'transaction_receipt'
    });
  }

  // Send stock alert
  async sendStockAlert(phone: string, lowStockItems: any[], shopOwner: string): Promise<boolean> {
    const message = this.generateStockAlertSMS(lowStockItems, shopOwner);
    
    return await this.sendSMS({
      to: phone,
      message,
      type: 'stock_alert'
    });
  }

  // Bulk SMS for multiple customers
  async sendBulkDueReminders(customers: { name: string; phone: string; dueAmount: number }[], shopName: string): Promise<{ sent: number; failed: number }> {
    let sent = 0;
    let failed = 0;
    
    console.log(`üì± SMS: Sending bulk due reminders to ${customers.length} customers`);
    
    for (const customer of customers) {
      try {
        const success = await this.sendDueReminder(customer.name, customer.phone, customer.dueAmount, shopName);
        if (success) {
          sent++;
        } else {
          failed++;
        }
        
        // Add delay between messages to avoid rate limiting
        await new Promise(resolve => setTimeout(resolve, 500));
      } catch (error) {
        console.error(`üì± SMS: Failed to send to ${customer.name}:`, error);
        failed++;
      }
    }
    
    console.log(`üì± SMS: Bulk send completed - Sent: ${sent}, Failed: ${failed}`);
    return { sent, failed };
  }

  // Check if SMS feature is available
  isAvailable(): boolean {
    return true; // SMS is always available as fallback to native SMS app
  }

  // Get SMS statistics
  getStats(): { provider: string; isConfigured: boolean } {
    return {
      provider: this.config.provider,
      isConfigured: !!(this.config.apiKey && this.config.apiUrl)
    };
  }
}

// Export singleton instance
export const smsManager = new SMSManager();

// Common SMS templates for Bangladesh market
export const smsTemplates = {
  dueReminder: (name: string, amount: number) => 
    `‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ${name}, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶ï‡¶ø ${formatCurrency(amount)}‡•§ ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶™‡¶∞‡¶ø‡¶∂‡ßã‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶‡•§`,
  
  paymentThankYou: (name: string, amount: number) => 
    `${name}, ${formatCurrency(amount)} ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶Ü‡¶∏‡¶¨‡ßá‡¶®‡•§`,
  
  stockAlert: (items: string) => 
    `‡¶∏‡ßç‡¶ü‡¶ï ‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ! ${items} ‡¶è‡¶∞ ‡¶∏‡ßç‡¶ü‡¶ï ‡¶ï‡¶Æ‡•§ ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§`,
  
  promotion: (offer: string) => 
    `‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶Ö‡¶´‡¶æ‡¶∞! ${offer}‡•§ ‡¶Ü‡¶ú‡¶á ‡¶Ü‡¶∏‡ßÅ‡¶®‡•§ ‡¶∏‡ßÄ‡¶Æ‡¶ø‡¶§ ‡¶∏‡¶Æ‡¶Ø‡¶º‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§`
};