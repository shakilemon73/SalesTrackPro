import { useQuery } from "@tanstack/react-query";
import { useState } from "react";
import { Link } from "wouter";
import { getBengaliDate, formatCurrency, toBengaliNumber } from "@/lib/bengali-utils";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";
import { supabaseService, CURRENT_USER_ID } from "@/lib/supabase";
import jsPDF from 'jspdf';

export default function Transactions() {
  const { toast } = useToast();

  const { data: sales = [], isLoading: salesLoading } = useQuery({
    queryKey: ['sales', CURRENT_USER_ID],
    queryFn: () => supabaseService.getSales(CURRENT_USER_ID),
  });

  const { data: expenses = [], isLoading: expensesLoading } = useQuery({
    queryKey: ['expenses', CURRENT_USER_ID],
    queryFn: () => supabaseService.getExpenses(CURRENT_USER_ID),
  });

  const { data: collections = [], isLoading: collectionsLoading } = useQuery({
    queryKey: ['collections', CURRENT_USER_ID],
    queryFn: () => supabaseService.getCollections(CURRENT_USER_ID),
  });

  const isLoading = salesLoading || expensesLoading || collectionsLoading;

  // Combine all transactions
  const allTransactions = [
    ...sales.map(sale => ({
      ...sale,
      type: 'sale',
      date: sale.sale_date,
      amount: parseFloat(sale.total_amount || 0),
      description: `বিক্রয় - ${sale.customer_name}`,
    })),
    ...expenses.map(expense => ({
      ...expense,
      type: 'expense',
      date: expense.expense_date,
      amount: parseFloat(expense.amount || 0),
      description: expense.description,
    })),
    ...collections.map(collection => ({
      ...collection,
      type: 'collection',
      date: collection.collection_date,
      amount: parseFloat(collection.amount || 0),
      description: `সংগ্রহ - ${collection.customer_name}`,
    }))
  ].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());

  // Calculate totals
  const totals = {
    sales: sales.reduce((sum, sale) => sum + parseFloat(sale.total_amount || 0), 0),
    expenses: expenses.reduce((sum, expense) => sum + parseFloat(expense.amount || 0), 0),
    collections: collections.reduce((sum, collection) => sum + parseFloat(collection.amount || 0), 0),
    get net() {
      return this.sales - this.expenses;
    }
  };

  const generatePDFReport = () => {
    const doc = new jsPDF();
    
    // Title
    doc.setFontSize(20);
    doc.text('Transaction Report - দোকান হিসাব', 20, 30);
    
    // Date
    doc.setFontSize(12);
    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 45);
    
    // Summary
    doc.setFontSize(14);
    doc.text('Summary:', 20, 65);
    doc.setFontSize(10);
    doc.text(`Total Sales: ৳${totals.sales.toFixed(2)}`, 20, 75);
    doc.text(`Total Expenses: ৳${totals.expenses.toFixed(2)}`, 20, 85);
    doc.text(`Net Amount: ৳${totals.net.toFixed(2)}`, 20, 95);
    
    // Transactions
    doc.setFontSize(14);
    doc.text('Recent Transactions:', 20, 115);
    
    let yPosition = 125;
    allTransactions.slice(0, 20).forEach((transaction, index) => {
      if (yPosition > 250) {
        doc.addPage();
        yPosition = 30;
      }
      
      doc.setFontSize(8);
      const date = new Date(transaction.date).toLocaleDateString();
      const type = getTransactionTypeText(transaction.type);
      const amount = `৳${transaction.amount.toFixed(2)}`;
      
      doc.text(`${index + 1}. ${date} - ${type} - ${amount}`, 20, yPosition);
      doc.text(transaction.description, 30, yPosition + 8);
      yPosition += 18;
    });
    
    // Footer
    const pageCount = (doc as any).internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(8);
      doc.text(`Page ${i} of ${pageCount} - Generated by দোকান হিসাব`, 20, 285);
    }
    
    // Save the PDF
    doc.save(`transactions-report-${new Date().getDate()}-${new Date().getMonth() + 1}-${new Date().getFullYear()}.pdf`);
    
    toast({
      title: "সফল",
      description: "রিপোর্ট PDF ডাউনলোড সম্পন্ন হয়েছে",
    });
  };

  const getTransactionTypeText = (type: string) => {
    switch (type) {
      case 'sale': return 'বিক্রয়';
      case 'expense': return 'খরচ';
      case 'collection': return 'সংগ্রহ';
      default: return 'অজানা';
    }
  };

  const getTransactionIcon = (type: string) => {
    switch (type) {
      case 'sale': return 'fas fa-shopping-cart text-green-600';
      case 'expense': return 'fas fa-receipt text-red-600';
      case 'collection': return 'fas fa-hand-holding-usd text-blue-600';
      default: return 'fas fa-question text-gray-600';
    }
  };

  return (
    <div className="page-layout">
      {/* Modern Header with Status */}
      <div className="page-header">
        <div className="px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center space-x-3">
              <Link to="/">
                <Button variant="ghost" size="sm" className="w-10 h-10">
                  <i className="fas fa-arrow-left text-slate-600"></i>
                </Button>
              </Link>
              <div>
                <h1 className="text-lg font-bold text-slate-900 bengali-font">সকল লেনদেন</h1>
                <div className="text-sm text-slate-500 flex items-center space-x-2">
                  <span>{getBengaliDate()}</span>
                  <div className="w-1.5 h-1.5 bg-green-500 rounded-full animate-pulse"></div>
                  <span className="text-xs text-green-600 font-medium">লাইভ</span>
                </div>
              </div>
            </div>
            <div className="flex items-center space-x-2">
              <Button 
                onClick={generatePDFReport} 
                variant="outline"
                size="sm"
              >
                <i className="fas fa-download mr-2"></i>
                PDF
              </Button>
              <Link to="/sales/new">
                <Button size="sm">
                  <i className="fas fa-plus mr-2"></i>
                  নতুন
                </Button>
              </Link>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="page-content content-max-width">
        {/* Summary Cards */}
        <div className="section-spacing">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {/* Sales Card */}
            <Card>
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-slate-600 bengali-font">মোট বিক্রয়</p>
                    <p className="text-2xl font-bold text-green-600">{formatCurrency(totals.sales)}</p>
                  </div>
                  <div className="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center">
                    <i className="fas fa-chart-line text-green-600"></i>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Expenses Card */}
            <Card>
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-slate-600 bengali-font">মোট খরচ</p>
                    <p className="text-2xl font-bold text-red-600">{formatCurrency(totals.expenses)}</p>
                  </div>
                  <div className="w-12 h-12 bg-red-100 rounded-full flex items-center justify-center">
                    <i className="fas fa-receipt text-red-600"></i>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Net Amount Card */}
            <Card>
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-slate-600 bengali-font">নিট আয়</p>
                    <p className={`text-2xl font-bold ${totals.net >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                      {formatCurrency(totals.net)}
                    </p>
                  </div>
                  <div className={`w-12 h-12 ${totals.net >= 0 ? 'bg-green-100' : 'bg-red-100'} rounded-full flex items-center justify-center`}>
                    <i className={`fas fa-wallet ${totals.net >= 0 ? 'text-green-600' : 'text-red-600'}`}></i>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>

        {/* Transactions List */}
        <div className="section-spacing">
          <h2 className="text-lg font-semibold text-slate-900 mb-4 bengali-font">সাম্প্রতিক লেনদেন</h2>
          
          {isLoading ? (
            <div className="space-y-3">
              {[1, 2, 3, 4, 5].map(i => (
                <div key={i} className="p-4 bg-white rounded-lg border border-slate-200 animate-pulse">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-4">
                      <div className="bg-slate-200 w-12 h-12 rounded-xl"></div>
                      <div className="space-y-2">
                        <div className="h-4 bg-slate-200 rounded w-32"></div>
                        <div className="h-3 bg-slate-200 rounded w-24"></div>
                      </div>
                    </div>
                    <div className="h-6 bg-slate-200 rounded w-20"></div>
                  </div>
                </div>
              ))}
            </div>
          ) : allTransactions.length === 0 ? (
            <div className="text-center py-12">
              <div className="w-16 h-16 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <i className="fas fa-receipt text-slate-400 text-xl"></i>
              </div>
              <h3 className="text-lg font-medium text-slate-900 mb-2 bengali-font">কোনো লেনদেন নেই</h3>
              <p className="text-slate-500 mb-6 bengali-font">এখনো কোনো লেনদেন রেকর্ড করা হয়নি</p>
              <Link to="/sales/new">
                <Button>
                  <i className="fas fa-plus mr-2"></i>
                  প্রথম বিক্রয় যোগ করুন
                </Button>
              </Link>
            </div>
          ) : (
            <div className="space-y-3">
              {allTransactions.map((transaction, index) => (
                <Card key={`${transaction.type}-${transaction.id}-${index}`} className="hover:shadow-md transition-shadow">
                  <CardContent className="p-4">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-4">
                        <div className="w-12 h-12 bg-slate-100 rounded-xl flex items-center justify-center">
                          <i className={getTransactionIcon(transaction.type)}></i>
                        </div>
                        <div>
                          <p className="font-medium text-slate-900 bengali-font">{transaction.description}</p>
                          <div className="flex items-center space-x-2">
                            <span className="text-sm text-slate-500">
                              {new Date(transaction.date).toLocaleDateString('bn-BD')}
                            </span>
                            <span className="text-xs px-2 py-1 bg-slate-100 rounded-full text-slate-600 bengali-font">
                              {getTransactionTypeText(transaction.type)}
                            </span>
                          </div>
                        </div>
                      </div>
                      <div className="text-right">
                        <p className={`font-bold ${
                          transaction.type === 'sale' || transaction.type === 'collection' 
                            ? 'text-green-600' 
                            : 'text-red-600'
                        }`}>
                          {transaction.type === 'sale' || transaction.type === 'collection' ? '+' : '-'}
                          {formatCurrency(transaction.amount)}
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}